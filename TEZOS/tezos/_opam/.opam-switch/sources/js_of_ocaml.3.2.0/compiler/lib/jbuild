(jbuild_version 1)
(library
 ((name js_of_ocaml_compiler)
  (public_name js_of_ocaml-compiler)
  (synopsis "Js_of_ocaml compiler library")
  (libraries (compiler-libs.common bytes
   (select source_map_io.ml from
    (yojson -> source_map_yojson.ml.in)
    (       -> source_map_unsupported.ml.in))
  ))
  (flags (:standard -w -7-37 -safe-string))
  (modules (:standard \ control))
  ))

(rule
  ((targets (js_lexer.ml))
   (mode fallback)
   (action  (chdir ${ROOT} (run ${bin:ocamllex} -q -o ${path:js_lexer.mll})))))

(rule
  ((targets (annot_lexer.ml))
   (mode fallback)
   (action  (chdir ${ROOT} (run ${bin:ocamllex} -q -o ${path:annot_lexer.mll})))))

;; menhir is just noisy, both because this parser has conflicts, or
;; because we don't use --infer (to avoid having to write  manually and
;; badly specified dependencieds), so we just discard stderr.
(rule
 ((targets (js_parser.mli js_parser.ml))
  (mode fallback)
  (action (ignore-stderr (run menhir --external-tokens Js_token --explain ${path:js_parser.mly})))))

(rule
 ((targets (annot_parser.mli annot_parser.ml))
  (mode fallback)
  (action (ignore-stderr (run menhir --explain ${path:annot_parser.mly})))))

(rule
 ((targets (util.ml))
  (action (run ${bin:cppo} -V OCAML:${ocaml_version}
           ;; Uncomment for bucklescript support
           ;; -D BUCKLESCRIPT
           ${path:util.cppo.ml} -o ${@}))
  ))

(rule
 ((targets (compiler_version.ml))
  (deps (../../version.ml.in))
  (action (copy ${<} ${@}))))
