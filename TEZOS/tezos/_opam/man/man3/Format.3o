.TH "Format" 3 2018-09-18 OCamldoc "OCaml library"
.SH NAME
Format \- Pretty-printing.
.SH Module
Module   Format
.SH Documentation
.sp
Module
.BI "Format"
 : 
.B sig  end

.sp
Pretty\-printing\&.
.sp
This module implements a pretty\-printing facility to format values
within 
.B Format\&.boxes
and 
.B Format\&.tags
combined with a set of 
.B Format\&.fpp
\&.
The pretty\-printer splits lines at specified 
.B Format\&.breaks
,
and indents lines according to the box structure\&.
Similarly, 
.B Format\&.tags
can be used to decouple text
presentation from its contents\&.
.sp
This pretty\-printing facility is implemented as an overlay on top of
abstract 
.B Format\&.formatter
which provide basic output
functions\&.
Some formatters are predefined, notably:
.sp
\-
.B Format\&.std_formatter
outputs to 
.B Pervasives\&.stdout

.sp
\-
.B Format\&.err_formatter
outputs to 
.B Pervasives\&.stderr

Most functions in the 
.B Format
module come in two variants:
a short version that operates on 
.B Format\&.std_formatter
and the
generic version prefixed by 
.B pp_
that takes a formatter
as its first argument\&.
.sp
More formatters can be created with 
.B Format\&.formatter_of_out_channel
,
.B Format\&.formatter_of_buffer
, 
.B Format\&.formatter_of_symbolic_output_buffer
or using 
.B Format\&.formatter
\&.

.sp

.sp
.sp

.PP

.B === 
.B Introduction
.B 
.B    For a gentle introduction to the basics of pretty\-printing using
.B    Format, read
.B    [http://caml\&.inria\&.fr/resources/doc/guides/format\&.en\&.html]
.B     http://caml\&.inria\&.fr/resources/doc/guides/format\&.en\&.html\&.
.B 
.B    You may consider this module as providing an extension to the
.B    printf facility to provide automatic line splitting\&. The addition of
.B    pretty\-printing annotations to your regular printf format strings gives
.B    you fancy indentation and line breaks\&.
.B    Pretty\-printing annotations are described below in the documentation of
.B    the function Format\&.fprintf\&.
.B 
.B    You may also use the explicit pretty\-printing box management and printing
.B    functions provided by this module\&. This style is more basic but more
.B    verbose than the concise fprintf format strings\&.
.B 
.B    For instance, the sequence
.B    open_box 0; print_string "x ="; print_space ();
.B     print_int 1; close_box (); print_newline ()
.B    that prints x = 1 within a pretty\-printing box, can be
.B    abbreviated as printf "@[%s@ %i@]@\&." "x =" 1, or even shorter
.B    printf "@[x =@ %i@]@\&." 1\&.
.B 
.B    Rule of thumb for casual users of this library:
.B \- use simple pretty\-printing boxes (as obtained by open_box 0);
.B \- use simple break hints as obtained by print_cut () that outputs a
.B    simple break hint, or by print_space () that outputs a space
.B    indicating a break hint;
.B \- once a pretty\-printing box is open, display its material with basic
.B    printing functions (e\&. g\&. print_int and print_string);
.B \- when the material for a pretty\-printing box has been printed, call
.B    close_box () to close the box;
.B \- at the end of pretty\-printing, flush the pretty\-printer to display all
.B    the remaining material, e\&.g\&. evaluate print_newline ()\&.
.B 
.B    The behavior of pretty\-printing commands is unspecified
.B    if there is no open pretty\-printing box\&. Each box opened by
.B    one of the open_ functions below must be closed using close_box
.B    for proper formatting\&. Otherwise, some of the material printed in the
.B    boxes may not be output, or may be formatted incorrectly\&.
.B 
.B    In case of interactive use, each phrase is executed in the initial state
.B    of the standard pretty\-printer: after each phrase execution, the
.B    interactive system closes all open pretty\-printing boxes, flushes all
.B    pending text, and resets the standard pretty\-printer\&.
.B 
.B    Warning: mixing calls to pretty\-printing functions of this module with
.B    calls to Pervasives low level output functions is error prone\&.
.B 
.B    The pretty\-printing functions output material that is delayed in the
.B    pretty\-printer queue and stacks in order to compute proper line
.B    splitting\&. In contrast, basic I/O output functions write directly in
.B    their output device\&. As a consequence, the output of a basic I/O function
.B    may appear before the output of a pretty\-printing function that has been
.B    called before\&. For instance,
.B    
.B     Pervasives\&.print_string "<";
.B     Format\&.print_string "PRETTY";
.B     Pervasives\&.print_string ">";
.B     Format\&.print_string "TEXT";
.B    
.B    leads to output <>PRETTYTEXT\&. ===

.PP
.I type formatter 

.sp
Abstract data corresponding to a pretty\-printer (also called a
formatter) and all its machinery\&. See also 
.B Format\&.formatter
\&.

.sp

.PP

.B === 
.B Pretty\-printing boxes
.B  ===

.PP

.PP

.B === The pretty\-printing engine uses the concepts of pretty\-printing box and
.B   break hint to drive indentation and line splitting behavior of the
.B   pretty\-printer\&.
.B 
.B   Each different pretty\-printing box kind introduces a specific line splitting
.B   policy:
.B 
.B \- within an horizontal box, break hints never split the line (but the
.B     line may be split in a box nested deeper),
.B \- within a vertical box, break hints always split the line,
.B \- within an horizontal/vertical box, if the box fits on the current line
.B     then break hints never split the line, otherwise break hint always split
.B     the line,
.B \- within a compacting box, a break hint never splits the line,
.B     unless there is no more room on the current line\&.
.B 
.B   Note that line splitting policy is box specific: the policy of a box does
.B   not rule the policy of inner boxes\&. For instance, if a vertical box is
.B   nested in an horizontal box, all break hints within the vertical box will
.B   split the line\&. ===

.PP

.I val pp_open_box 
: 
.B formatter -> int -> unit
.sp

.sp

.I val open_box 
: 
.B int -> unit
.sp

.B pp_open_box ppf d
opens a new compacting pretty\-printing box with
offset 
.B d
in the formatter 
.B ppf
\&.
.sp
Within this box, the pretty\-printer prints as much as possible material on
every line\&.
.sp
A break hint splits the line if there is no more room on the line to
print the remainder of the box\&.
.sp
Within this box, the pretty\-printer emphasizes the box structure: a break
hint also splits the line if the splitting ``moves to the left\&'\&'
(i\&.e\&. the new line gets an indentation smaller than the one of the current
line)\&.
.sp
This box is the general purpose pretty\-printing box\&.
.sp
If the pretty\-printer splits the line in the box, offset 
.B d
is added to
the current indentation\&.

.sp

.I val pp_close_box 
: 
.B formatter -> unit -> unit
.sp

.sp

.I val close_box 
: 
.B unit -> unit
.sp
Closes the most recently open pretty\-printing box\&.

.sp

.I val pp_open_hbox 
: 
.B formatter -> unit -> unit
.sp

.sp

.I val open_hbox 
: 
.B unit -> unit
.sp

.B pp_open_hbox ppf ()
opens a new \&'horizontal\&' pretty\-printing box\&.
.sp
This box prints material on a single line\&.
.sp
Break hints in a horizontal box never split the line\&.
(Line splitting may still occur inside boxes nested deeper)\&.

.sp

.I val pp_open_vbox 
: 
.B formatter -> int -> unit
.sp

.sp

.I val open_vbox 
: 
.B int -> unit
.sp

.B pp_open_vbox ppf d
opens a new \&'vertical\&' pretty\-printing box
with offset 
.B d
\&.
.sp
This box prints material on as many lines as break hints in the box\&.
.sp
Every break hint in a vertical box splits the line\&.
.sp
If the pretty\-printer splits the line in the box, 
.B d
is added to the
current indentation\&.

.sp

.I val pp_open_hvbox 
: 
.B formatter -> int -> unit
.sp

.sp

.I val open_hvbox 
: 
.B int -> unit
.sp

.B pp_open_hvbox ppf d
opens a new \&'horizontal/vertical\&' pretty\-printing box
with offset 
.B d
\&.
.sp
This box behaves as an horizontal box if it fits on a single line,
otherwise it behaves as a vertical box\&.
.sp
If the pretty\-printer splits the line in the box, 
.B d
is added to the
current indentation\&.

.sp

.I val pp_open_hovbox 
: 
.B formatter -> int -> unit
.sp

.sp

.I val open_hovbox 
: 
.B int -> unit
.sp

.B pp_open_hovbox ppf d
opens a new \&'horizontal\-or\-vertical\&'
pretty\-printing box with offset 
.B d
\&.
.sp
This box prints material as much as possible on every line\&.
.sp
A break hint splits the line if there is no more room on the line to
print the remainder of the box\&.
.sp
If the pretty\-printer splits the line in the box, 
.B d
is added to the
current indentation\&.

.sp

.PP

.B === 
.B Formatting functions
.B  ===

.PP

.I val pp_print_string 
: 
.B formatter -> string -> unit
.sp

.sp

.I val print_string 
: 
.B string -> unit
.sp

.B pp_print_string ppf s
prints 
.B s
in the current pretty\-printing box\&.

.sp

.I val pp_print_as 
: 
.B formatter -> int -> string -> unit
.sp

.sp

.I val print_as 
: 
.B int -> string -> unit
.sp

.B pp_print_as ppf len s
prints 
.B s
in the current pretty\-printing box\&.
The pretty\-printer formats 
.B s
as if it were of length 
.B len
\&.

.sp

.I val pp_print_int 
: 
.B formatter -> int -> unit
.sp

.sp

.I val print_int 
: 
.B int -> unit
.sp
Print an integer in the current pretty\-printing box\&.

.sp

.I val pp_print_float 
: 
.B formatter -> float -> unit
.sp

.sp

.I val print_float 
: 
.B float -> unit
.sp
Print a floating point number in the current pretty\-printing box\&.

.sp

.I val pp_print_char 
: 
.B formatter -> char -> unit
.sp

.sp

.I val print_char 
: 
.B char -> unit
.sp
Print a character in the current pretty\-printing box\&.

.sp

.I val pp_print_bool 
: 
.B formatter -> bool -> unit
.sp

.sp

.I val print_bool 
: 
.B bool -> unit
.sp
Print a boolean in the current pretty\-printing box\&.

.sp

.PP

.B === 
.B Break hints
.B  ===

.PP

.PP

.B === A \&'break hint\&' tells the pretty\-printer to output some space or split the
.B   line whichever way is more appropriate to the current pretty\-printing box
.B   splitting rules\&.
.B 
.B   Break hints are used to separate printing items and are mandatory to let
.B   the pretty\-printer correctly split lines and indent items\&.
.B 
.B   Simple break hints are:
.B \- the \&'space\&': output a space or split the line if appropriate,
.B \- the \&'cut\&': split the line if appropriate\&.
.B 
.B   Note: the notions of space and line splitting are abstract for the
.B   pretty\-printing engine, since those notions can be completely redefined
.B   by the programmer\&.
.B   However, in the pretty\-printer default setting, ``output a space\&'\&' simply
.B   means printing a space character (ASCII code 32) and ``split the line\&'\&'
.B   means printing a newline character (ASCII code 10)\&. ===

.PP

.I val pp_print_space 
: 
.B formatter -> unit -> unit
.sp

.sp

.I val print_space 
: 
.B unit -> unit
.sp

.B pp_print_space ppf ()
emits a \&'space\&' break hint:
the pretty\-printer may split the line at this point,
otherwise it prints one space\&.
.sp

.B pp_print_space ppf ()
is equivalent to 
.B pp_print_break ppf 1 0
\&.

.sp

.I val pp_print_cut 
: 
.B formatter -> unit -> unit
.sp

.sp

.I val print_cut 
: 
.B unit -> unit
.sp

.B pp_print_cut ppf ()
emits a \&'cut\&' break hint:
the pretty\-printer may split the line at this point,
otherwise it prints nothing\&.
.sp

.B pp_print_cut ppf ()
is equivalent to 
.B pp_print_break ppf 0 0
\&.

.sp

.I val pp_print_break 
: 
.B formatter -> int -> int -> unit
.sp

.sp

.I val print_break 
: 
.B int -> int -> unit
.sp

.B pp_print_break ppf nspaces offset
emits a \&'full\&' break hint:
the pretty\-printer may split the line at this point,
otherwise it prints 
.B nspaces
spaces\&.
.sp
If the pretty\-printer splits the line, 
.B offset
is added to
the current indentation\&.

.sp

.I val pp_force_newline 
: 
.B formatter -> unit -> unit
.sp

.sp

.I val force_newline 
: 
.B unit -> unit
.sp
Force a new line in the current pretty\-printing box\&.
.sp
The pretty\-printer must split the line at this point,
.sp
Not the normal way of pretty\-printing, since imperative line splitting may
interfere with current line counters and box size calculation\&.
Using break hints within an enclosing vertical box is a better
alternative\&.

.sp

.I val pp_print_if_newline 
: 
.B formatter -> unit -> unit
.sp

.sp

.I val print_if_newline 
: 
.B unit -> unit
.sp
Execute the next formatting command if the preceding line
has just been split\&. Otherwise, ignore the next formatting
command\&.

.sp

.PP

.B === 
.B Pretty\-printing termination
.B  ===

.PP

.I val pp_print_flush 
: 
.B formatter -> unit -> unit
.sp

.sp

.I val print_flush 
: 
.B unit -> unit
.sp
End of pretty\-printing: resets the pretty\-printer to initial state\&.
.sp
All open pretty\-printing boxes are closed, all pending text is printed\&.
In addition, the pretty\-printer low level output device is flushed to
ensure that all pending text is really displayed\&.
.sp
Note: never use 
.B print_flush
in the normal course of a pretty\-printing
routine, since the pretty\-printer uses a complex buffering machinery to
properly indent the output; manually flushing those buffers at random
would conflict with the pretty\-printer strategy and result to poor
rendering\&.
.sp
Only consider using 
.B print_flush
when displaying all pending material is
mandatory (for instance in case of interactive use when you want the user
to read some text) and when resetting the pretty\-printer state will not
disturb further pretty\-printing\&.
.sp
Warning: If the output device of the pretty\-printer is an output channel,
repeated calls to 
.B print_flush
means repeated calls to 
.B Pervasives\&.flush
to flush the out channel; these explicit flush calls could foil the
buffering strategy of output channels and could dramatically impact
efficiency\&.

.sp

.I val pp_print_newline 
: 
.B formatter -> unit -> unit
.sp

.sp

.I val print_newline 
: 
.B unit -> unit
.sp
End of pretty\-printing: resets the pretty\-printer to initial state\&.
.sp
All open pretty\-printing boxes are closed, all pending text is printed\&.
.sp
Equivalent to 
.B Format\&.print_flush
followed by a new line\&.
See corresponding words of caution for 
.B Format\&.print_flush
\&.
.sp
Note: this is not the normal way to output a new line;
the preferred method is using break hints within a vertical pretty\-printing
box\&.

.sp

.PP

.B === 
.B Margin
.B  ===

.PP

.I val pp_set_margin 
: 
.B formatter -> int -> unit
.sp

.sp

.I val set_margin 
: 
.B int -> unit
.sp

.B pp_set_margin ppf d
sets the right margin to 
.B d
(in characters):
the pretty\-printer splits lines that overflow the right margin according to
the break hints given\&.
Nothing happens if 
.B d
is smaller than 2\&.
If 
.B d
is too large, the right margin is set to the maximum
admissible value (which is greater than 
.B 10 ^ 9
)\&.
If 
.B d
is less than the current maximum indentation limit, the
maximum indentation limit is decreased while trying to preserve
a minimal ratio 
.B max_indent/margin>=50%
and if possible
the current difference 
.B margin \- max_indent
\&.

.sp

.I val pp_get_margin 
: 
.B formatter -> unit -> int
.sp

.sp

.I val get_margin 
: 
.B unit -> int
.sp
Returns the position of the right margin\&.

.sp

.PP

.B === 
.B Maximum indentation limit
.B  ===

.PP

.I val pp_set_max_indent 
: 
.B formatter -> int -> unit
.sp

.sp

.I val set_max_indent 
: 
.B int -> unit
.sp

.B pp_set_max_indent ppf d
sets the maximum indentation limit of lines
to 
.B d
(in characters):
once this limit is reached, new pretty\-printing boxes are rejected to the
left, if they do not fit on the current line\&.
.sp
Nothing happens if 
.B d
is smaller than 2\&.
If 
.B d
is too large, the limit is set to the maximum
admissible value (which is greater than 
.B 10 ^ 9
)\&.
.sp
If 
.B d
is greater or equal than the current margin, it is ignored,
and the current maximum indentation limit is kept\&.

.sp

.I val pp_get_max_indent 
: 
.B formatter -> unit -> int
.sp

.sp

.I val get_max_indent 
: 
.B unit -> int
.sp
Return the maximum indentation limit (in characters)\&.

.sp

.PP

.B === 
.B Maximum formatting depth
.B  ===

.PP

.PP

.B === The maximum formatting depth is the maximum number of pretty\-printing
.B   boxes simultaneously open\&.
.B 
.B   Material inside boxes nested deeper is printed as an ellipsis (more
.B   precisely as the text returned by Format\&.get_ellipsis_text ())\&. ===

.PP

.I val pp_set_max_boxes 
: 
.B formatter -> int -> unit
.sp

.sp

.I val set_max_boxes 
: 
.B int -> unit
.sp

.B pp_set_max_boxes ppf max
sets the maximum number of pretty\-printing
boxes simultaneously open\&.
.sp
Material inside boxes nested deeper is printed as an ellipsis (more
precisely as the text returned by 
.B Format\&.get_ellipsis_text
.B ()
)\&.
.sp
Nothing happens if 
.B max
is smaller than 2\&.

.sp

.I val pp_get_max_boxes 
: 
.B formatter -> unit -> int
.sp

.sp

.I val get_max_boxes 
: 
.B unit -> int
.sp
Returns the maximum number of pretty\-printing boxes allowed before
ellipsis\&.

.sp

.I val pp_over_max_boxes 
: 
.B formatter -> unit -> bool
.sp

.sp

.I val over_max_boxes 
: 
.B unit -> bool
.sp
Tests if the maximum number of pretty\-printing boxes allowed have already
been opened\&.

.sp

.PP

.B === 
.B Tabulation boxes
.B  ===

.PP

.PP

.B === A tabulation box prints material on lines divided into cells of fixed
.B   length\&. A tabulation box provides a simple way to display vertical columns
.B   of left adjusted text\&.
.B 
.B   This box features command set_tab to define cell boundaries, and command
.B   print_tab to move from cell to cell and split the line when there is no
.B   more cells to print on the line\&.
.B 
.B   Note: printing within tabulation box is line directed, so arbitrary line
.B   splitting inside a tabulation box leads to poor rendering\&. Yet, controlled
.B   use of tabulation boxes allows simple printing of columns within
.B   module Format\&. ===

.PP

.I val pp_open_tbox 
: 
.B formatter -> unit -> unit
.sp

.sp

.I val open_tbox 
: 
.B unit -> unit
.sp

.B open_tbox ()
opens a new tabulation box\&.
.sp
This box prints lines separated into cells of fixed width\&.
.sp
Inside a tabulation box, special tabulation markers defines points of
interest on the line (for instance to delimit cell boundaries)\&.
Function 
.B Format\&.set_tab
sets a tabulation marker at insertion point\&.
.sp
A tabulation box features specific tabulation breaks to move to next
tabulation marker or split the line\&. Function 
.B Format\&.print_tbreak
prints
a tabulation break\&.

.sp

.I val pp_close_tbox 
: 
.B formatter -> unit -> unit
.sp

.sp

.I val close_tbox 
: 
.B unit -> unit
.sp
Closes the most recently opened tabulation box\&.

.sp

.I val pp_set_tab 
: 
.B formatter -> unit -> unit
.sp

.sp

.I val set_tab 
: 
.B unit -> unit
.sp
Sets a tabulation marker at current insertion point\&.

.sp

.I val pp_print_tab 
: 
.B formatter -> unit -> unit
.sp

.sp

.I val print_tab 
: 
.B unit -> unit
.sp

.B print_tab ()
emits a \&'next\&' tabulation break hint: if not already set on
a tabulation marker, the insertion point moves to the first tabulation
marker on the right, or the pretty\-printer splits the line and insertion
point moves to the leftmost tabulation marker\&.
.sp
It is equivalent to 
.B print_tbreak 0 0
\&.

.sp

.I val pp_print_tbreak 
: 
.B formatter -> int -> int -> unit
.sp

.sp

.I val print_tbreak 
: 
.B int -> int -> unit
.sp

.B print_tbreak nspaces offset
emits a \&'full\&' tabulation break hint\&.
.sp
If not already set on a tabulation marker, the insertion point moves to the
first tabulation marker on the right and the pretty\-printer prints
.B nspaces
spaces\&.
.sp
If there is no next tabulation marker on the right, the pretty\-printer
splits the line at this point, then insertion point moves to the leftmost
tabulation marker of the box\&.
.sp
If the pretty\-printer splits the line, 
.B offset
is added to
the current indentation\&.

.sp

.PP

.B === 
.B Ellipsis
.B  ===

.PP

.I val pp_set_ellipsis_text 
: 
.B formatter -> string -> unit
.sp

.sp

.I val set_ellipsis_text 
: 
.B string -> unit
.sp
Set the text of the ellipsis printed when too many pretty\-printing boxes
are open (a single dot, 
.B \&.
, by default)\&.

.sp

.I val pp_get_ellipsis_text 
: 
.B formatter -> unit -> string
.sp

.sp

.I val get_ellipsis_text 
: 
.B unit -> string
.sp
Return the text of the ellipsis\&.

.sp

.PP

.B === 
.B Semantic tags
.B  ===

.PP
.I type tag 
= 
.B string

.sp

.sp

.PP

.B === Semantic tags (or simply tags) are user\&'s defined delimiters
.B   to associate user\&'s specific operations to printed entities\&.
.B 
.B   Common usage of semantic tags is text decoration to get specific font or
.B   text size rendering for a display device, or marking delimitation of
.B   entities (e\&.g\&. HTML or TeX elements or terminal escape sequences)\&.
.B   More sophisticated usage of semantic tags could handle dynamic
.B   modification of the pretty\-printer behavior to properly print the material
.B   within some specific tags\&.
.B 
.B   In order to properly delimit printed entities, a semantic tag must be
.B   opened before and closed after the entity\&. Semantic tags must be properly
.B   nested like parentheses\&.
.B 
.B   Tag specific operations occur any time a tag is opened or closed, At each
.B   occurrence, two kinds of operations are performed tag\-marking and
.B   tag\-printing:
.B \- The tag\-marking operation is the simpler tag specific operation: it simply
.B   writes a tag specific string into the output device of the
.B   formatter\&. Tag\-marking does not interfere with line\-splitting computation\&.
.B \- The tag\-printing operation is the more involved tag specific operation: it
.B   can print arbitrary material to the formatter\&. Tag\-printing is tightly
.B   linked to the current pretty\-printer operations\&.
.B 
.B   Roughly speaking, tag\-marking is commonly used to get a better rendering of
.B   texts in the rendering device, while tag\-printing allows fine tuning of
.B   printing routines to print the same entity differently according to the
.B   semantic tags (i\&.e\&. print additional material or even omit parts of the
.B   output)\&.
.B 
.B   More precisely: when a semantic tag is opened or closed then both and
.B   successive \&'tag\-printing\&' and \&'tag\-marking\&' operations occur:
.B \- Tag\-printing a semantic tag means calling the formatter specific function
.B   print_open_tag (resp\&. print_close_tag) with the name of the tag as
.B   argument: that tag\-printing function can then print any regular material
.B   to the formatter (so that this material is enqueued as usual in the
.B   formatter queue for further line splitting computation)\&.
.B \- Tag\-marking a semantic tag means calling the formatter specific function
.B   mark_open_tag (resp\&. mark_close_tag) with the name of the tag as
.B   argument: that tag\-marking function can then return the \&'tag\-opening
.B   marker\&' (resp\&. `tag\-closing marker\&') for direct output into the output
.B   device of the formatter\&.
.B 
.B   Being written directly into the output device of the formatter, semantic
.B   tag marker strings are not considered as part of the printing material that
.B   drives line splitting (in other words, the length of the strings
.B   corresponding to tag markers is considered as zero for line splitting)\&.
.B 
.B   Thus, semantic tag handling is in some sense transparent to pretty\-printing
.B   and does not interfere with usual indentation\&. Hence, a single
.B   pretty\-printing routine can output both simple \&'verbatim\&' material or
.B   richer decorated output depending on the treatment of tags\&. By default,
.B   tags are not active, hence the output is not decorated with tag
.B   information\&. Once set_tags is set to true, the pretty\-printer engine
.B   honors tags and decorates the output accordingly\&.
.B 
.B   Default tag\-marking functions behave the HTML way: tags are enclosed in "<"
.B   and ">"; hence, opening marker for tag t is "<t>" and closing marker is
.B   "</t>"\&.
.B 
.B   Default tag\-printing functions just do nothing\&.
.B 
.B   Tag\-marking and tag\-printing functions are user definable and can
.B   be set by calling Format\&.set_formatter_tag_functions\&.
.B 
.B   Semantic tag operations may be set on or off with Format\&.set_tags\&.
.B   Tag\-marking operations may be set on or off with Format\&.set_mark_tags\&.
.B   Tag\-printing operations may be set on or off with Format\&.set_print_tags\&. ===

.PP

.I val pp_open_tag 
: 
.B formatter -> string -> unit
.sp

.sp

.I val open_tag 
: 
.B tag -> unit
.sp

.B pp_open_tag ppf t
opens the semantic tag named 
.B t
\&.
.sp
The 
.B print_open_tag
tag\-printing function of the formatter is called with
.B t
as argument; then the opening tag marker for 
.B t
, as given by
.B mark_open_tag t
, is written into the output device of the formatter\&.

.sp

.I val pp_close_tag 
: 
.B formatter -> unit -> unit
.sp

.sp

.I val close_tag 
: 
.B unit -> unit
.sp

.B pp_close_tag ppf ()
closes the most recently opened semantic tag 
.B t
\&.
.sp
The closing tag marker, as given by 
.B mark_close_tag t
, is written into the
output device of the formatter; then the 
.B print_close_tag
tag\-printing
function of the formatter is called with 
.B t
as argument\&.

.sp

.I val pp_set_tags 
: 
.B formatter -> bool -> unit
.sp

.sp

.I val set_tags 
: 
.B bool -> unit
.sp

.B pp_set_tags ppf b
turns on or off the treatment of semantic tags
(default is off)\&.

.sp

.I val pp_set_print_tags 
: 
.B formatter -> bool -> unit
.sp

.sp

.I val set_print_tags 
: 
.B bool -> unit
.sp

.B pp_set_print_tags ppf b
turns on or off the tag\-printing operations\&.

.sp

.I val pp_set_mark_tags 
: 
.B formatter -> bool -> unit
.sp

.sp

.I val set_mark_tags 
: 
.B bool -> unit
.sp

.B pp_set_mark_tags ppf b
turns on or off the tag\-marking operations\&.

.sp

.I val pp_get_print_tags 
: 
.B formatter -> unit -> bool
.sp

.sp

.I val get_print_tags 
: 
.B unit -> bool
.sp
Return the current status of tag\-printing operations\&.

.sp

.I val pp_get_mark_tags 
: 
.B formatter -> unit -> bool
.sp

.sp

.I val get_mark_tags 
: 
.B unit -> bool
.sp
Return the current status of tag\-marking operations\&.

.sp

.I val pp_set_formatter_out_channel 
: 
.B formatter -> Pervasives.out_channel -> unit
.sp

.B Redirecting the standard formatter output


.sp

.I val set_formatter_out_channel 
: 
.B Pervasives.out_channel -> unit
.sp
Redirect the standard pretty\-printer output to the given channel\&.
(All the output functions of the standard formatter are set to the
default output functions printing to the given channel\&.)
.sp

.B set_formatter_out_channel
is equivalent to
.B Format\&.pp_set_formatter_out_channel
.B std_formatter
\&.

.sp

.I val pp_set_formatter_output_functions 
: 
.B formatter -> (string -> int -> int -> unit) -> (unit -> unit) -> unit
.sp

.sp

.I val set_formatter_output_functions 
: 
.B (string -> int -> int -> unit) -> (unit -> unit) -> unit
.sp

.B pp_set_formatter_output_functions ppf out flush
redirects the
standard pretty\-printer output functions to the functions 
.B out
and
.B flush
\&.
.sp
The 
.B out
function performs all the pretty\-printer string output\&.
It is called with a string 
.B s
, a start position 
.B p
, and a number of
characters 
.B n
; it is supposed to output characters 
.B p
to 
.B p + n \- 1
of
.B s
\&.
.sp
The 
.B flush
function is called whenever the pretty\-printer is flushed
(via conversion 
.B %!
, or pretty\-printing indications 
.B @?
or 
.B @\&.
, or
using low level functions 
.B print_flush
or 
.B print_newline
)\&.

.sp

.I val pp_get_formatter_output_functions 
: 
.B formatter -> unit -> (string -> int -> int -> unit) * (unit -> unit)
.sp

.sp

.I val get_formatter_output_functions 
: 
.B unit -> (string -> int -> int -> unit) * (unit -> unit)
.sp
Return the current output functions of the standard pretty\-printer\&.

.sp

.PP

.B === 
.B Redefining formatter output
.B  ===

.PP

.PP

.B === The Format module is versatile enough to let you completely redefine
.B   the meaning of pretty\-printing output: you may provide your own functions
.B   to define how to handle indentation, line splitting, and even printing of
.B   all the characters that have to be printed! ===

.PP

.PP

.B === 
.B Redefining output functions
.B  ===

.PP
.I type formatter_out_functions 
= {
 out_string : 
.B string -> int -> int -> unit
;
 out_flush : 
.B unit -> unit
;
 out_newline : 
.B unit -> unit
;
 out_spaces : 
.B int -> unit
;
 out_indent : 
.B int -> unit
;
 }

.sp
The set of output functions specific to a formatter:
.sp
\-the 
.B out_string
function performs all the pretty\-printer string output\&.
It is called with a string 
.B s
, a start position 
.B p
, and a number of
characters 
.B n
; it is supposed to output characters 
.B p
to 
.B p + n \- 1
of
.B s
\&.
.sp
\-the 
.B out_flush
function flushes the pretty\-printer output device\&.
.sp
\-
.B out_newline
is called to open a new line when the pretty\-printer splits
the line\&.
.sp
\-the 
.B out_spaces
function outputs spaces when a break hint leads to spaces
instead of a line split\&. It is called with the number of spaces to output\&.
.sp
\-the 
.B out_indent
function performs new line indentation when the
pretty\-printer splits the line\&. It is called with the indentation value of
the new line\&.

By default:
.sp
\-fields 
.B out_string
and 
.B out_flush
are output device specific;
(e\&.g\&. 
.B Pervasives\&.output_string
and 
.B Pervasives\&.flush
for a
.B Pervasives\&.out_channel
device, or 
.B Buffer\&.add_substring
and
.B Pervasives\&.ignore
for a 
.B Buffer\&.t
output device),
.sp
\-field 
.B out_newline
is equivalent to 
.B out_string "\(rsn" 0 1
;
.sp
\-fields 
.B out_spaces
and 
.B out_indent
are equivalent to
.B out_string (String\&.make n \&' \&') 0 n
\&.


.sp
.B "Since"
4.01.0

.sp

.I val pp_set_formatter_out_functions 
: 
.B formatter -> formatter_out_functions -> unit
.sp

.sp

.I val set_formatter_out_functions 
: 
.B formatter_out_functions -> unit
.sp

.B pp_set_formatter_out_functions ppf out_funs
Set all the pretty\-printer output functions of 
.B ppf
to those of
argument 
.B out_funs
,
.sp
This way, you can change the meaning of indentation (which can be
something else than just printing space characters) and the meaning of new
lines opening (which can be connected to any other action needed by the
application at hand)\&.
.sp
Reasonable defaults for functions 
.B out_spaces
and 
.B out_newline
are
respectively 
.B out_funs\&.out_string (String\&.make n \&' \&') 0 n
and
.B out_funs\&.out_string "\(rsn" 0 1
\&.

.sp
.B "Since"
4.01.0

.sp

.I val pp_get_formatter_out_functions 
: 
.B formatter -> unit -> formatter_out_functions
.sp

.sp

.I val get_formatter_out_functions 
: 
.B unit -> formatter_out_functions
.sp
Return the current output functions of the pretty\-printer,
including line splitting and indentation functions\&. Useful to record the
current setting and restore it afterwards\&.

.sp
.B "Since"
4.01.0

.sp

.PP

.B === 
.B Redefining semantic tag operations
.B  ===

.PP
.I type formatter_tag_functions 
= {
 mark_open_tag : 
.B tag -> string
;
 mark_close_tag : 
.B tag -> string
;
 print_open_tag : 
.B tag -> unit
;
 print_close_tag : 
.B tag -> unit
;
 }

.sp
The semantic tag handling functions specific to a formatter:
.B mark
versions are the \&'tag\-marking\&' functions that associate a string
marker to a tag in order for the pretty\-printing engine to write
those markers as 0 length tokens in the output device of the formatter\&.
.B print
versions are the \&'tag\-printing\&' functions that can perform
regular printing when a tag is closed or opened\&.

.sp

.I val pp_set_formatter_tag_functions 
: 
.B formatter -> formatter_tag_functions -> unit
.sp

.sp

.I val set_formatter_tag_functions 
: 
.B formatter_tag_functions -> unit
.sp

.B pp_set_formatter_tag_functions ppf tag_funs
changes the meaning of
opening and closing semantic tag operations to use the functions in
.B tag_funs
when printing on 
.B ppf
\&.
.sp
When opening a semantic tag with name 
.B t
, the string 
.B t
is passed to the
opening tag\-marking function (the 
.B mark_open_tag
field of the
record 
.B tag_funs
), that must return the opening tag marker for
that name\&. When the next call to 
.B close_tag ()
happens, the semantic tag
name 
.B t
is sent back to the closing tag\-marking function (the
.B mark_close_tag
field of record 
.B tag_funs
), that must return a
closing tag marker for that name\&.
.sp
The 
.B print_
field of the record contains the tag\-printing functions that
are called at tag opening and tag closing time, to output regular material
in the pretty\-printer queue\&.

.sp

.I val pp_get_formatter_tag_functions 
: 
.B formatter -> unit -> formatter_tag_functions
.sp

.sp

.I val get_formatter_tag_functions 
: 
.B unit -> formatter_tag_functions
.sp
Return the current semantic tag operation functions of the standard
pretty\-printer\&.

.sp

.PP

.B === 
.B Defining formatters
.B 
.B 
.B   Defining new formatters permits unrelated output of material in
.B   parallel on several output devices\&.
.B   All the parameters of a formatter are local to the formatter:
.B   right margin, maximum indentation limit, maximum number of pretty\-printing
.B   boxes simultaneously open, ellipsis, and so on, are specific to
.B   each formatter and may be fixed independently\&.
.B 
.B   For instance, given a Buffer\&.t buffer b, Format\&.formatter_of_buffer b
.B   returns a new formatter using buffer b as its output device\&.
.B   Similarly, given a Pervasives\&.out_channel output channel oc,
.B   Format\&.formatter_of_out_channel oc returns a new formatter using
.B   channel oc as its output device\&.
.B 
.B   Alternatively, given out_funs, a complete set of output functions for a
.B   formatter, then Format\&.formatter_of_out_functions out_funs computes a new
.B   formatter using those functions for output\&. ===

.PP

.I val formatter_of_out_channel 
: 
.B Pervasives.out_channel -> formatter
.sp

.B formatter_of_out_channel oc
returns a new formatter writing
to the corresponding output channel 
.B oc
\&.

.sp

.I val std_formatter 
: 
.B formatter
.sp
The standard formatter to write to standard output\&.
.sp
It is defined as 
.B Format\&.formatter_of_out_channel
.B Pervasives\&.stdout
\&.

.sp

.I val err_formatter 
: 
.B formatter
.sp
A formatter to write to standard error\&.
.sp
It is defined as 
.B Format\&.formatter_of_out_channel
.B Pervasives\&.stderr
\&.

.sp

.I val formatter_of_buffer 
: 
.B Buffer.t -> formatter
.sp

.B formatter_of_buffer b
returns a new formatter writing to
buffer 
.B b
\&. At the end of pretty\-printing, the formatter must be flushed
using 
.B Format\&.pp_print_flush
or 
.B Format\&.pp_print_newline
, to print all the
pending material into the buffer\&.

.sp

.I val stdbuf 
: 
.B Buffer.t
.sp
The string buffer in which 
.B str_formatter
writes\&.

.sp

.I val str_formatter 
: 
.B formatter
.sp
A formatter to output to the 
.B Format\&.stdbuf
string buffer\&.
.sp

.B str_formatter
is defined as 
.B Format\&.formatter_of_buffer
.B Format\&.stdbuf
\&.

.sp

.I val flush_str_formatter 
: 
.B unit -> string
.sp
Returns the material printed with 
.B str_formatter
, flushes
the formatter and resets the corresponding buffer\&.

.sp

.I val make_formatter 
: 
.B (string -> int -> int -> unit) -> (unit -> unit) -> formatter
.sp

.B make_formatter out flush
returns a new formatter that outputs with
function 
.B out
, and flushes with function 
.B flush
\&.
.sp
For instance, 
.B 
.B     make_formatter
.B       (Pervasives\&.output oc)
.B       (fun () \-> Pervasives\&.flush oc) 
returns a formatter to the 
.B Pervasives\&.out_channel
.B oc
\&.

.sp

.I val formatter_of_out_functions 
: 
.B formatter_out_functions -> formatter
.sp

.B formatter_of_out_functions out_funs
returns a new formatter that writes
with the set of output functions 
.B out_funs
\&.
.sp
See definition of type 
.B Format\&.formatter_out_functions
for the meaning of argument
.B out_funs
\&.

.sp
.B "Since"
4.06.0

.sp

.PP

.B === 
.B Symbolic pretty\-printing
.B  ===

.PP

.PP

.B === Symbolic pretty\-printing is pretty\-printing using a symbolic formatter,
.B   i\&.e\&. a formatter that outputs symbolic pretty\-printing items\&.
.B 
.B   When using a symbolic formatter, all regular pretty\-printing activities
.B   occur but output material is symbolic and stored in a buffer of output items\&.
.B   At the end of pretty\-printing, flushing the output buffer allows
.B   post\-processing of symbolic output before performing low level output
.B   operations\&.
.B 
.B   In practice, first define a symbolic output buffer b using:
.B \- let sob = make_symbolic_output_buffer ()\&.
.B   Then define a symbolic formatter with:
.B \- let ppf = formatter_of_symbolic_output_buffer sob
.B 
.B   Use symbolic formatter ppf as usual, and retrieve symbolic items at end
.B   of pretty\-printing by flushing symbolic output buffer sob with:
.B \- flush_symbolic_output_buffer sob\&.
.B  ===

.PP
.I type symbolic_output_item 
=
 | Output_flush  (* symbolic flush command
 *)
 | Output_newline  (* symbolic newline command
 *)
 | Output_string
.B of 
.B string
.I "  "
  (* 
.B Output_string s
: symbolic output for string 
.B s

 *)
 | Output_spaces
.B of 
.B int
.I "  "
  (* 
.B Output_spaces n
: symbolic command to output 
.B n
spaces
 *)
 | Output_indent
.B of 
.B int
.I "  "
  (* 
.B Output_indent i
: symbolic indentation of size 
.B i

 *)
 
.sp
Items produced by symbolic pretty\-printers

.sp
.B "Since"
4.06.0

.sp
.I type symbolic_output_buffer 

.sp
The output buffer of a symbolic pretty\-printer\&.

.sp
.B "Since"
4.06.0

.sp

.I val make_symbolic_output_buffer 
: 
.B unit -> symbolic_output_buffer
.sp

.B make_symbolic_output_buffer ()
returns a fresh buffer for
symbolic output\&.

.sp
.B "Since"
4.06.0

.sp

.I val clear_symbolic_output_buffer 
: 
.B symbolic_output_buffer -> unit
.sp

.B clear_symbolic_output_buffer sob
resets buffer 
.B sob
\&.

.sp
.B "Since"
4.06.0

.sp

.I val get_symbolic_output_buffer 
: 
.B symbolic_output_buffer -> symbolic_output_item list
.sp

.B get_symbolic_output_buffer sob
returns the contents of buffer 
.B sob
\&.

.sp
.B "Since"
4.06.0

.sp

.I val flush_symbolic_output_buffer 
: 
.B symbolic_output_buffer -> symbolic_output_item list
.sp

.B flush_symbolic_output_buffer sob
returns the contents of buffer
.B sob
and resets buffer 
.B sob
\&.
.B flush_symbolic_output_buffer sob
is equivalent to
.B let items = get_symbolic_output_buffer sob in
.B    clear_symbolic_output_buffer sob; items


.sp
.B "Since"
4.06.0

.sp

.I val add_symbolic_output_item 
: 
.B symbolic_output_buffer -> symbolic_output_item -> unit
.sp

.B add_symbolic_output_item sob itm
adds item 
.B itm
to buffer 
.B sob
\&.

.sp
.B "Since"
4.06.0

.sp

.I val formatter_of_symbolic_output_buffer 
: 
.B symbolic_output_buffer -> formatter
.sp

.B formatter_of_symbolic_output_buffer sob
returns a symbolic formatter
that outputs to 
.B symbolic_output_buffer
.B sob
\&.

.sp
.B "Since"
4.06.0

.sp

.PP

.B === 
.B Convenience formatting functions\&.
.B  ===

.PP

.I val pp_print_list 
: 
.B ?pp_sep:(formatter -> unit -> unit) ->
.B   (formatter -> 'a -> unit) -> formatter -> 'a list -> unit
.sp

.B pp_print_list ?pp_sep pp_v ppf l
prints items of list 
.B l
,
using 
.B pp_v
to print each item, and calling 
.B pp_sep
between items (
.B pp_sep
defaults to 
.B Format\&.pp_print_cut
\&.
Does nothing on empty lists\&.

.sp
.B "Since"
4.02.0

.sp

.I val pp_print_text 
: 
.B formatter -> string -> unit
.sp

.B pp_print_text ppf s
prints 
.B s
with spaces and newlines respectively
printed using 
.B Format\&.pp_print_space
and 
.B Format\&.pp_force_newline
\&.

.sp
.B "Since"
4.02.0

.sp

.PP

.B === 
.B Formatted pretty\-printing
.B  ===

.PP

.PP

.B === Module Format provides a complete set of printf like functions for
.B   pretty\-printing using format string specifications\&.
.B 
.B   Specific annotations may be added in the format strings to give
.B   pretty\-printing commands to the pretty\-printing engine\&.
.B 
.B   Those annotations are introduced in the format strings using the @
.B   character\&. For instance, @  means a space break, @, means a cut,
.B   @[ opens a new box, and @] closes the last open box\&. ===

.PP

.I val fprintf 
: 
.B formatter -> ('a, formatter, unit) Pervasives.format -> 'a
.sp

.sp

.PP

.B === fprintf ff fmt arg1 \&.\&.\&. argN formats the arguments arg1 to argN
.B   according to the format string fmt, and outputs the resulting string on
.B   the formatter ff\&.
.B 
.B   The format string fmt is a character string which contains three types of
.B   objects: plain characters and conversion specifications as specified in
.B   the Printf module, and pretty\-printing indications specific to the
.B   Format module\&.
.B 
.B   The pretty\-printing indication characters are introduced by
.B   a @ character, and their meanings are:
.B \- @[: open a pretty\-printing box\&. The type and offset of the
.B     box may be optionally specified with the following syntax:
.B     the < character, followed by an optional box type indication,
.B     then an optional integer offset, and the closing > character\&.
.B     Pretty\-printing box type is one of h, v, hv, b, or hov\&.
.B     \&'h\&' stands for an \&'horizontal\&' pretty\-printing box,
.B     \&'v\&' stands for a \&'vertical\&' pretty\-printing box,
.B     \&'hv\&' stands for an \&'horizontal/vertical\&' pretty\-printing box,
.B     \&'b\&' stands for an \&'horizontal\-or\-vertical\&' pretty\-printing box
.B     demonstrating indentation,
.B     \&'hov\&' stands a simple \&'horizontal\-or\-vertical\&' pretty\-printing box\&.
.B     For instance, @[<hov 2> opens an \&'horizontal\-or\-vertical\&'
.B     pretty\-printing box with indentation 2 as obtained with open_hovbox 2\&.
.B     For more details about pretty\-printing boxes, see the various box opening
.B     functions open_*box\&.
.B \- @]: close the most recently opened pretty\-printing box\&.
.B \- @,: output a \&'cut\&' break hint, as with print_cut ()\&.
.B \- @ : output a \&'space\&' break hint, as with print_space ()\&.
.B \- @;: output a \&'full\&' break hint as with print_break\&. The
.B     nspaces and offset parameters of the break hint may be
.B     optionally specified with the following syntax:
.B     the < character, followed by an integer nspaces value,
.B     then an integer offset, and a closing > character\&.
.B     If no parameters are provided, the good break defaults to a
.B     \&'space\&' break hint\&.
.B \- @\&.: flush the pretty\-printer and split the line, as with
.B     print_newline ()\&.
.B \- @<n>: print the following item as if it were of length n\&.
.B     Hence, printf "@<0>%s" arg prints arg as a zero length string\&.
.B     If @<n> is not followed by a conversion specification,
.B     then the following character of the format is printed as if
.B     it were of length n\&.
.B \- @{: open a semantic tag\&. The name of the tag may be optionally
.B     specified with the following syntax:
.B     the < character, followed by an optional string
.B     specification, and the closing > character\&. The string
.B     specification is any character string that does not contain the
.B     closing character \&'>\&'\&. If omitted, the tag name defaults to the
.B     empty string\&.
.B     For more details about semantic tags, see the functions Format\&.open_tag and
.B     Format\&.close_tag\&.
.B \- @}: close the most recently opened semantic tag\&.
.B \- @?: flush the pretty\-printer as with print_flush ()\&.
.B     This is equivalent to the conversion %!\&.
.B \- @\(rsn: force a newline, as with force_newline (), not the normal way
.B     of pretty\-printing, you should prefer using break hints inside a vertical
.B     pretty\-printing box\&.
.B 
.B   Note: To prevent the interpretation of a @ character as a
.B   pretty\-printing indication, escape it with a % character\&.
.B   Old quotation mode @@ is deprecated since it is not compatible with
.B   formatted input interpretation of character \&'@\&'\&.
.B 
.B   Example: printf "@[%s@ %d@]@\&." "x =" 1 is equivalent to
.B   open_box (); print_string "x ="; print_space ();
.B    print_int 1; close_box (); print_newline ()\&.
.B   It prints x = 1 within a pretty\-printing \&'horizontal\-or\-vertical\&' box\&. ===

.PP

.I val printf 
: 
.B ('a, formatter, unit) Pervasives.format -> 'a
.sp
Same as 
.B fprintf
above, but output on 
.B std_formatter
\&.

.sp

.I val eprintf 
: 
.B ('a, formatter, unit) Pervasives.format -> 'a
.sp
Same as 
.B fprintf
above, but output on 
.B err_formatter
\&.

.sp

.I val sprintf 
: 
.B ('a, unit, string) Pervasives.format -> 'a
.sp
Same as 
.B printf
above, but instead of printing on a formatter,
returns a string containing the result of formatting the arguments\&.
Note that the pretty\-printer queue is flushed at the end of each
call to 
.B sprintf
\&.
.sp
In case of multiple and related calls to 
.B sprintf
to output
material on a single string, you should consider using 
.B fprintf
with the predefined formatter 
.B str_formatter
and call
.B flush_str_formatter ()
to get the final result\&.
.sp
Alternatively, you can use 
.B Format\&.fprintf
with a formatter writing to a
buffer of your own: flushing the formatter and the buffer at the end of
pretty\-printing returns the desired string\&.

.sp

.I val asprintf 
: 
.B ('a, formatter, unit, string) Pervasives.format4 -> 'a
.sp
Same as 
.B printf
above, but instead of printing on a formatter,
returns a string containing the result of formatting the arguments\&.
The type of 
.B asprintf
is general enough to interact nicely with 
.B %a
conversions\&.

.sp
.B "Since"
4.01.0

.sp

.I val ifprintf 
: 
.B formatter -> ('a, formatter, unit) Pervasives.format -> 'a
.sp
Same as 
.B fprintf
above, but does not print anything\&.
Useful to ignore some material when conditionally printing\&.

.sp
.B "Since"
3.10.0

.sp

.PP

.B === Formatted Pretty\-Printing with continuations\&. ===

.PP

.I val kfprintf 
: 
.B (formatter -> 'a) ->
.B   formatter -> ('b, formatter, unit, 'a) Pervasives.format4 -> 'b
.sp
Same as 
.B fprintf
above, but instead of returning immediately,
passes the formatter to its first argument at the end of printing\&.

.sp

.I val ikfprintf 
: 
.B (formatter -> 'a) ->
.B   formatter -> ('b, formatter, unit, 'a) Pervasives.format4 -> 'b
.sp
Same as 
.B kfprintf
above, but does not print anything\&.
Useful to ignore some material when conditionally printing\&.

.sp
.B "Since"
3.12.0

.sp

.I val ksprintf 
: 
.B (string -> 'a) -> ('b, unit, string, 'a) Pervasives.format4 -> 'b
.sp
Same as 
.B sprintf
above, but instead of returning the string,
passes it to the first argument\&.

.sp

.I val kasprintf 
: 
.B (string -> 'a) -> ('b, formatter, unit, 'a) Pervasives.format4 -> 'b
.sp
Same as 
.B asprintf
above, but instead of returning the string,
passes it to the first argument\&.

.sp
.B "Since"
4.03

.sp

.PP

.B === 
.B Deprecated
.B  ===

.PP

.I val bprintf 
: 
.B Buffer.t -> ('a, formatter, unit) Pervasives.format -> 'a
.sp
.B "Deprecated."
This function is error prone\&. Do not use it\&.
This function is neither compositional nor incremental, since it flushes
the pretty\-printer queue at each call\&.
.sp
If you need to print to some buffer 
.B b
, you must first define a
formatter writing to 
.B b
, using 
.B let to_b = formatter_of_buffer b
; then
use regular calls to 
.B Format\&.fprintf
with formatter 
.B to_b
\&.

.sp

.I val kprintf 
: 
.B (string -> 'a) -> ('b, unit, string, 'a) Pervasives.format4 -> 'b
.sp
.B "Deprecated."
An alias for 
.B ksprintf
\&.

.sp

.I val set_all_formatter_output_functions 
: 
.B out:(string -> int -> int -> unit) ->
.B   flush:(unit -> unit) ->
.B   newline:(unit -> unit) -> spaces:(int -> unit) -> unit
.sp
.B "Deprecated."
Subsumed by 
.B set_formatter_out_functions
\&.

.sp

.I val get_all_formatter_output_functions 
: 
.B unit ->
.B   (string -> int -> int -> unit) * (unit -> unit) * (unit -> unit) *
.B   (int -> unit)
.sp
.B "Deprecated."
Subsumed by 
.B get_formatter_out_functions
\&.

.sp

.I val pp_set_all_formatter_output_functions 
: 
.B formatter ->
.B   out:(string -> int -> int -> unit) ->
.B   flush:(unit -> unit) ->
.B   newline:(unit -> unit) -> spaces:(int -> unit) -> unit
.sp
.B "Deprecated."
Subsumed by 
.B pp_set_formatter_out_functions
\&.

.sp

.I val pp_get_all_formatter_output_functions 
: 
.B formatter ->
.B   unit ->
.B   (string -> int -> int -> unit) * (unit -> unit) * (unit -> unit) *
.B   (int -> unit)
.sp
.B "Deprecated."
Subsumed by 
.B pp_get_formatter_out_functions
\&.

.sp
